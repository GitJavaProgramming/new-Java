java.io包
通过IO_UML类图可以看到java.io包顶层接口：Serializable、AutoCloseable等

java.io.Serializable  对象序列化标识接口,实现这个接口会让对象可序列化
    public class File implements Serializable, Comparable<File> （抽象）文件实现了可序列化语义
public interface Externalizable extends java.io.Serializable {
    void writeExternal(ObjectOutput out) throws IOException;
    void readExternal(ObjectInput in) throws IOException, ClassNotFoundException;
}
实现Externalizable可以对序列化过程控制
有关序列化机制后续会详细介绍


JDK1.5时输入输出流顶层接口为：Closeable
JDK1.7时输入输出流顶层接口为：AutoCloseable。Closeable接口继承了AutoCloseable
AutoCloseable接口定义只有一个方法，用于关闭被try-with-resources语句管理的资源。
public interface AutoCloseable {
    // This method is invoked automatically on objects managed by the try-with-resources statement.
    void close() throws Exception;
}
输入输出四大抽象类：
输入流：Reader、InputStream
输出流：Writer、OutputStream都实现了java.io.Flushable
    Flushable将任何缓冲区的数据写入基础流。

输入输出流通过装饰器模式提供额外功能加持

Reader实现了java.lang.Readable
    Readable接口定义：
    public interface Readable {
        public int read(java.nio.CharBuffer cb) throws IOException;
    }
Readable代表一个字符源，调用者可以将字符读入CharBuffer进行使用，read(CharBuffer cb)返回读取到CharBuffer中的字符数

支持读写压缩格式的数据流：参考：Java编程思想 第四版 中文 ch18.11 压缩
java.util.GZIPInputStream、java.util.GZIPOutputStream等
比如网页返回的数据使用了Gzip压缩，可以用使用这个流读取到。
